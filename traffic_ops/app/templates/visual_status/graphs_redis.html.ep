<!--
     Copyright 2015 Comcast Cable Communications Management, LLC

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
 -->
% title 'Visual Status';

<script type="text/javascript" src="/js/flot/jquery.flot.min.js"></script>
<script type="text/javascript" src="/js/flot/jquery.flot.time.js"></script>   
<script type="text/javascript" src="/js/flot/jquery.flot.axislabels.js"></script>
<script type="text/javascript" src="/js/flot/jquery.flot.stack.js"></script>
<script type="text/javascript" src="/js/flot/jquery.flot.tooltip.js"></script>
<script type="text/javascript" src="/js/flot/jquery.flot.selection.js"></script>
<script type="text/javascript" src="/js/percentagebar.js"></script>
<style type="text/css">
.main_header { width: 1112px; }
.flot_yaxis_label {
  -webkit-transform: rotate(-90deg);
  -moz-transform: rotate(-90deg);
  -ms-transform: rotate(-90deg);
  -o-transform: rotate(-90deg);
  transform: rotate(-90deg);

  /* also accepts left, right, top, bottom coordinates; not required, but a good idea for styling */
  -webkit-transform-origin: 50% 50%;
  -moz-transform-origin: 50% 50%;
  -ms-transform-origin: 50% 50%;
  -o-transform-origin: 50% 50%;
  transform-origin: 50% 50%;

  /* Should be unset in IE9+ I think. */
  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3);
  /*position: absolute; */
  width: 35px;
  font-size: 10pt;
  float:left;
  margin-top:100px;
}
.flot_xaxis_label { text-align:center; vertical-align:middle; clear:both; padding-top:10px; padding-bottom:5px; font-size:10pt; }
.live_data_header { text-align:right; color:white; font-size:10pt; width:1112px; background-color: #898989; padding:5px; border:1px solid #c1c1c1; margin-bottom:2px; }
.title_section { color:#ffffff; font-size:10pt; padding:5px; background-color:#252525; margin-bottom:5px; border:1px solid #656565; }
.about_section { text-align:left; color:white; font-size:10pt; width:1112px; }
.flot_chart_section { color:#ffffff; width:1112px; height:310px; padding:5px; background-color:#454545; border:1px solid #ffffff; margin-bottom: 1px; border:1px solid white; }
.flot_chart_container { float:left; height:250px; overflow:auto; padding:10px; overflow-y: hidden; overflow-x: hidden;}
.flot_chart { float:left; width:720px; height:230px; padding:0px; background-color:#454545; }
.statistics_section { float:left; width:315px; height:240; color:white; font-size:150%; width:305px; background-color:#898989; margin-right:5px; padding:5px; border:1px solid #121212; }
.time_select { float:left; color:white; font-size:10pt; padding:5px; }
#gbpsval, 
% foreach my $cdn_name (@{ $cdn_names } ) {
  #<%= $cdn_name %>_gbps_val, #<%= $cdn_name %>_conn_val,
% }
#connval { width:100%; float:left; font-size:300%; font-family: monospace; white-space: pre;}

.ui-progressbar {
  position: relative;
}
.progress-label {
  /*position: absolute;*/
  left: 50%;
  top: 4px;
  text-shadow: 1px 1px 0 #fff;
}
.percent_label {
  clear:both;
  float:left;
  margin-left:10px;
}
.progress_bar {
  float:right;
  height: 10px;
  width: 115px;
  float:right;
}
</style>
<script>

var statInfo = Object;
var gbps_dataset = new Array;
var con_dataset = new Array;
var options = Object;
var totalTime = 86400;                         
var updateInterval = 10000;                     // TODO JvD
var reloadTime = new Date().getTime();
var firstTime = true;
var redisUrl = new Object;
var plotDataCount = 0;
var divideForGbps = 1000000;
var capacity = new Object;
var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
var zoomStart = 0;
var zoomEnd = 0;
var timeOut;
var ajaxRequest = new Object;
var baseInterval = 60;
var count = 0;
var resetCount = 18; // reset the graph every resetCount draw.
var matchString = undefined;
var ds_name = undefined;
// Need one URL per CDN 
% foreach my $cdn_name (sort @{ $cdn_names } ) {
  redisUrl["<%= $cdn_name %>"] = "/redis/";
% } 

function createRedisDataCallBack(cdnName,  selectString) {
  // Note: The references to the vars above create closures on them.
  return function(jdata) {
    var cdnPrefix = cdnName + ".";
    if ((zoomStart != 0 || totalTime > 86401) && jdata['series'][0]['samples'].length == 1) 
      return; // if we're zoomed  or long term data and an update comes in
    var statName = jdata['statName'];
    var interval = jdata['interval'];
    capacity[cdnName] = jdata['capacity'] / 1000000;
    if (matchString != "all") { 
      if (jdata['cdnName'] != cdnName) 
        return;
    }
   
    var lastTstamp = 0;
    if (statInfo[cdnPrefix + statName].plotData[statInfo[cdnPrefix + statName].plotData.length -1] != undefined) {
      var last = statInfo[cdnPrefix + statName].plotData[statInfo[cdnPrefix + statName].plotData.length -1]
      lastTstamp = last[0];
    } 
	  $.each(jdata.series, function(serieIndex, series) {
		  var tstamp = 0 + series['timeBase'];
		  $.each(series, function(seriesIndex, samples) {
        if (seriesIndex != 'samples') return;
        $.each(samples, function(sampleIndex, sample) {
          var value = sample / statInfo[cdnPrefix + statName].divideBy;
          if (lastTstamp < tstamp) { 
            var tmp = [tstamp, value];
            statInfo[cdnPrefix + statName].plotData.push(tmp);
            lastTstamp = tstamp;
          }
          // var tmp = [tstamp, value];
          // statInfo[cdnPrefix + statName].plotData.push(tmp);
          tstamp += interval;
        });
		  });
	  });
    plotDataCount = statInfo[cdnPrefix + statName].plotData.length;
    
    if (statInfo[cdnPrefix + statName].counter % (baseInterval/10) == 0 && statInfo[cdnPrefix + statName].counter != 0 ) {
      var v = 0;
      var t = 0;
      for (var i = 0; i < baseInterval/10; i++) {
        var tmp =  statInfo[cdnPrefix + statName].plotData.pop();
        v += tmp[1];
        t = tmp[0]
      }
      var avg = v/(baseInterval/10);
      var tmp = [t, avg];
      statInfo[cdnPrefix + statName].plotData.push(tmp);
      statInfo[cdnPrefix + statName].plotData.shift();
    }
    drawCharts();
    updateLabels();
    statInfo[cdnPrefix + statName].counter++;
    firstTime = false;
  }
}

function createErrorCallBack() {
  return function errorCallback(jqXHR, textStatus, errorThrown) {
    console.log('$.ajax error:' + textStatus);
    jqXHR.abort();
  }
}

function getRedisData(cdnName, selectString) {
  $.each(statInfo, function(statName, statProps) {
    if (!statName.match(cdnName)) {
      return;
    }
    var statPath = "/redis/" + statName;
    statPath = statPath.replace(cdnName + ".", cdnName + ":" + selectString + ":")
    var nowSeconds = Math.round(new Date() / 1000);
    if (firstTime) {
      var thenSeconds = nowSeconds - totalTime;
      statPath += "/" + thenSeconds + "/" + nowSeconds + "/" + baseInterval; 
    } else {
      if (zoomStart == 0) {
        var thenSeconds = nowSeconds - 40;
        statPath += "/now/now/10";
      } else {
        statPath += "/" + zoomStart + "/" + zoomEnd + "/10";
      }
    }

    console.log('Requesting:' + statPath)
    ajaxRequest[statInfo] = $.ajax({
      dataType: "JSON",
      url: statPath,
      data: { },
      success: createRedisDataCallBack(cdnName, selectString),
      timeout: 20000,
      error: createErrorCallBack()
    });
  });
}

function updateLabels() {
  var totalGbps = 0;
  var totalKbps = 0;
  var totalConns = 0;
  var url_count = 1;
  $.each(redisUrl, function(cdn, url) {
    urlArray = url.split("\/publish");
    var lastVal = 0;
    var sName = cdn + ".kbps";
    if (statInfo[sName].plotData != undefined && statInfo[sName].plotData[statInfo[sName].plotData.length - 1] != undefined) {
      lastVal = statInfo[sName].plotData[statInfo[sName].plotData.length - 1][1];
    }
    if (lastVal != undefined) {

      setProgress(cdn + "_percent_indicator", Math.round(lastVal/capacity[cdn] * 100));
      if (capacity[cdn] != undefined) setText(cdn + "_percent_indicator", "avail: " + capacity[cdn].toFixed(1) + ", used: " + Math.round(lastVal/capacity[cdn] * 100));
      $("#" + cdn + "_gbps_val").text(localeString(lastVal.toFixed(2), ",", 3, 15)); // toLocaleString doesn't want to play for this in FF
    }

    totalGbps += lastVal ;
    totalKbps += lastVal * 1000;
    if (ds_name == "all") {
     sName = cdn + ".ats.proxy.process.http.current_client_connections";
    } else {
      sName = cdn + ".tps_2xx";
    }
    if (statInfo[sName].plotData != undefined && statInfo[sName].plotData[statInfo[sName].plotData.length - 1] != undefined) {
      lastVal = statInfo[sName].plotData[statInfo[sName].plotData.length - 1][1];      
    }
    if (lastVal != undefined) 
       $("#" + cdn + "_conn_val").text(localeString(Math.round(lastVal), ",", 3, 15));
    totalConns += lastVal;
    url_count++;

  });
  $("#gbpsval").text(localeString(totalGbps.toFixed(2), ",", 3, 15)); // toLocaleString doesn't want to play for this in FF
  $("#connval").text(localeString(Math.round(totalConns), ",", 3, 15));
}

function localeString(x, sep, grp, len) {
    var sx = (''+x).split('.'), s = '', i, j;
    sep || (sep = ','); // default seperator
    grp || grp === 0 || (grp = 3); // default grouping
    i = sx[0].length;
    while (i > grp) {
        j = i - grp;
        s = sep + sx[0].slice(j, i) + s;
        i = j;
    }
    s = sx[0].slice(0, i) + s;
    sx[0] = s;
    numString = " " + sx.join('.');
    if (len) {
      // pad... a bit ugly, I know... doesn't _really_ align either because not using fixed font
      pos = numString.length +1;
      while (pos < len) {
       numString = " " + numString;
      pos++;    
      }
    } 
    return numString;
    
}

function updateOptions() {
  var numLabel = 2;
  var toolTip = true;
  if (zoomStart == 0) {
    toolTip = false;
  }
  options = {
    series: {
      // color: "lightblue",
      stack: true,
      lines: {
        show: true,
        lineWidth: 0.9,
        fill: true
      }
    },
    colors: [ "#47CEFA", "#00FFFF", "#47CEFA" ],
    xaxis: {
      color: "white",
	  tickColor: "#838383",
      mode: "time",
      
      tickFormatter: function (v, axis) {
        var date = new Date(v * 1000);

        var hours = date.getUTCHours() < 10 ? "0" + date.getUTCHours() : date.getUTCHours();
        var minutes = date.getUTCMinutes() < 10 ? "0" + date.getUTCMinutes() : date.getUTCMinutes();
        var dayno = date.getUTCDay();
        return days[dayno] + " " + hours + ":" + minutes;
      },
      munTickSize: [2, "hour"],
    },
    yaxis: {
      tickDecimals: 2,
      color: "white",
	  tickColor: "#838383",
      axisLabelUseCanvas: true,
      axisLabelFontSizePixels: 14,
      axisLabelFontFamily: 'Verdana, Arial',
      axisLabelPadding: 6
    },
    legend: {       
      show: false,
      position: "nw",
      backgroundOpacity: 0,
      labelBoxBorderColor: "#000"
    },
    grid: {
      hoverable: toolTip,
      borderWidth: 2,        
      backgroundColor: { colors: [ "grey", "black" ] }
    },
    selection: {
      mode: "x",
      color: "grey" 
    },
    tooltip: toolTip,
    tooltipOpts: {
      content : "%s<br>%x -> %y",
    }
  };
  $('.flot-x1-axis').css('color','white');
}

function createStat(statName, divBy, isCumul) {
  console.log('Creating stat: ' + statName);
  statInfo[statName] = new Object;
  statInfo[statName].divideBy = divBy;
  statInfo[statName].isCumulative = isCumul;
  statInfo[statName].plotData = new Array;
  statInfo[statName].counter = 0;
}



$(document).ready(function () {
%= include 'jmenu'

    // This is a global
    matchString = "<%= $matchstring %>";
    // console.log(matchString);
    var parts = matchString.split(":");
    ds_name = parts[0]; // ds_name is global
    var loc_name = parts[1];
    var host_name = parts[2];
    updateOptions();
    $.each(redisUrl, function(cdn, url) {
      createStat(cdn + ".kbps", divideForGbps, false); 
      gbps_dataset.push({ label: cdn, data: statInfo[cdn + '.kbps'].plotData });
      if (ds_name == "all") {
        createStat( cdn + ".ats.proxy.process.http.current_client_connections", 1, false);
        con_dataset.push({ label: cdn, data: statInfo[cdn +'.ats.proxy.process.http.current_client_connections'].plotData });
        $('#lower_title').text('Client Connections');
      } else {
        createStat( cdn + ".tps_2xx", 1, false);
        con_dataset.push({ label: cdn, data: statInfo[cdn +'.tps_2xx'].plotData });
        $('#lower_title').text('Transations / second');
      }
    });
    $('#time').change(function(){ 
      var chosen_time = this.options[this.selectedIndex].value;
      totalTime = parseInt(chosen_time);
      reloadTime = new Date().getTime();
      if (chosen_time > 86401) {
        baseInterval = 900;
      } else {
        baseInterval = 60;
      }
      resetZoom();
    });
    $('#time option[value="86400"]').prop('selected',true);

    $("#con_flot").bind("plotselected", function (ev, ranges) { 
      if (firstTime) 
        return;
      $.each(statInfo, function(statName, statProps) {
       ajaxRequest[statInfo].abort();
      });
      clearTimeout(timeOut);
      $('#time option[value="0"]').prop('selected',true);
      zoomStart= Math.round(ranges.xaxis.from);
      zoomEnd = Math.round(ranges.xaxis.to);
      $.each(statInfo, function(statName, statProps) {
        statProps.plotData.length = 0;
      });
      updateOptions();
      drawCharts();
      update();    
    });
    $("#gbps_flot").bind("plotselected", function (ev, ranges) { 
      if (firstTime) 
        return;
      $.each(statInfo, function(statName, statProps) {
       ajaxRequest[statInfo].abort();
      });
      clearTimeout(timeOut);
      $('#time option[value="0"]').prop('selected',true);
      zoomStart= Math.round(ranges.xaxis.from);
      zoomEnd = Math.round(ranges.xaxis.to);
      $.each(statInfo, function(statName, statProps) {
        statProps.plotData.length = 0;
      });
      updateOptions();
      drawCharts();
      update();      
    });

  	update();
}); // end document ready

function drawCharts() {
   $.plot($("#gbps_flot"), gbps_dataset, options);
   $.plot($("#con_flot"), con_dataset, options);
}

function update() {
   if (count % resetCount == 0 ) { // reset the graph
    $.each(statInfo, function(statName, statProps) {
        statProps.plotData.length = 0;
    });
    firstTime = true;
    console.log("Resetting Graph!");
  }

  if (zoomStart == 0) {
    timeOut = setTimeout(update, updateInterval);
  } else {
    clearTimeout(timeOut);
  }
   
  count++;
  $.each(redisUrl, function(cdn, url) {
    getRedisData(cdn, matchString);
  });
 

}

function resetZoom() {
  firstTime = true;
  zoomStart = 0;
  zoomEnd = 0;
  $.each(statInfo, function(statName, statProps) {
   statProps.plotData.length = 0;
  });
  updateOptions();
  drawCharts();
  update();
}
</script>
<body id="edge_health">
%= include 'navbar'
  <br />
  <br />
  <div class="main_header">
    <div class="time_select">
      TIME:
      <select id="time">
        <option value=86400>Last Day</option>
        <option value=0 disabled>Zoomed</option>
      </select>
    </div>
    <div class="live_data_header">
      live data for <b><%= $matchstring %></b>
    </div>
  </div>
  <div class="flot_chart_section">
    <div class="title_section">
      <div>Bandwidth</div>
    </div>

    <div class="statistics_section">
      <div>total Gbps:</div>
      <div style="float:left;">
          <div id="gbpsval"></div>
      </div>
% foreach my $cdn ( @{ $cdn_names }) {
      <div style="clear:both;float:left;">
            <div><%= $cdn %> Gbps:</div>
      </div>
	  <div><script>percentLabel('<%= $cdn %>_percent_indicator',0);</script></div>
	  <div><script>progressBar('<%= $cdn %>_percent_indicator',0);</script></div>
      <div style="float:left;">
         <div id="<%= $cdn %>_gbps_val"></div>
      </div>
% } 
    </div>

    <div class="flot_chart_container">
      <div class="flot_yaxis_label">bw(stacked)</div>
      <div id="gbps_flot" class="flot_chart"></div>
      <div class="flot_xaxis_label">time(UTC)</div>
    </div>
  </div>
  <div class="flot_chart_section">
    <div class="title_section">
      <div><span id="lower_title"></span></div>
    </div>
    <div class="statistics_section">
      <div>
        <div>total:</div>
        <span id="connval"></span>
      </div>
% foreach my $cdn ( @{ $cdn_names }) {
      <div>
        <div><%= $cdn %>:</div>
        <span id="<%= $cdn %>_conn_val"></span>
      </div>
% }       
    </div>
    <div class="flot_chart_container">
      <div class="flot_yaxis_label">conns(stacked)</div>
      <div id="con_flot" class="flot_chart"></div>
      <div class="flot_xaxis_label">time(UTC)</div>
    </div>
  </div>
  <div class="about_section" style="margin-top:20px;">
      Notes: 
      <ul>
      <li> The data in the above charts is stacked.
      <li> To zoom in to a particular period of the graph just select that period. Live updating stops in zoomed mode.
      </ul>
  </div>
</body>
</html>
