// Copyright 2015 Comcast Cable Communications Management, LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was initially generated by gen_to_start.go (add link), as a start
// of the Traffic Ops golang data model

package api

import (
	"encoding/json"
	_ "github.com/Comcast/traffic_control/traffic_ops/experimental/server/output_format" // needed for swagger
	"github.com/jmoiron/sqlx"
	null "gopkg.in/guregu/null.v3"
	"log"
	"time"
)

type JobAgent struct {
	Id          int64         `db:"id" json:"id"`
	Name        null.String   `db:"name" json:"name"`
	Description null.String   `db:"description" json:"description"`
	Active      int64         `db:"active" json:"active"`
	LastUpdated time.Time     `db:"last_updated" json:"lastUpdated"`
	Links       JobAgentLinks `json:"_links" db:-`
}

type JobAgentLinks struct {
	Self string `db:"self" json:"_self"`
}

type JobAgentLink struct {
	ID  int64  `db:"job_agent" json:"id"`
	Ref string `db:"job_agent_id_ref" json:"_ref"`
}

// @Title getJobAgentById
// @Description retrieves the job_agent information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    JobAgent
// @Resource /api/2.0
// @Router /api/2.0/job_agent/{id} [get]
func getJobAgentById(id int, db *sqlx.DB) (interface{}, error) {
	ret := []JobAgent{}
	arg := JobAgent{}
	arg.Id = int64(id)
	queryStr := "select *, concat('" + API_PATH + "job_agent/', id) as self "
	queryStr += " from job_agent where id=:id"
	nstmt, err := db.PrepareNamed(queryStr)
	err = nstmt.Select(&ret, arg)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	nstmt.Close()
	return ret, nil
}

// @Title getJobAgents
// @Description retrieves the job_agent
// @Accept  application/json
// @Success 200 {array}    JobAgent
// @Resource /api/2.0
// @Router /api/2.0/job_agent [get]
func getJobAgents(db *sqlx.DB) (interface{}, error) {
	ret := []JobAgent{}
	queryStr := "select *, concat('" + API_PATH + "job_agent/', id) as self "
	queryStr += " from job_agent"
	err := db.Select(&ret, queryStr)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return ret, nil
}

// @Title postJobAgent
// @Description enter a new job_agent
// @Accept  application/json
// @Param                 Body body     JobAgent   true "JobAgent object that should be added to the table"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/job_agent [post]
func postJobAgent(payload []byte, db *sqlx.DB) (interface{}, error) {
	var v JobAgent
	err := json.Unmarshal(payload, &v)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	sqlString := "INSERT INTO job_agent("
	sqlString += "name"
	sqlString += ",description"
	sqlString += ",active"
	sqlString += ") VALUES ("
	sqlString += ":name"
	sqlString += ",:description"
	sqlString += ",:active"
	sqlString += ")"
	result, err := db.NamedExec(sqlString, v)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}

// @Title putJobAgent
// @Description modify an existing job_agententry
// @Accept  application/json
// @Param   id              path    int     true        "The row id"
// @Param                 Body body     JobAgent   true "JobAgent object that should be added to the table"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/job_agent/{id}  [put]
func putJobAgent(id int, payload []byte, db *sqlx.DB) (interface{}, error) {
	var v JobAgent
	err := json.Unmarshal(payload, &v)
	v.Id = int64(id) // overwrite the id in the payload
	if err != nil {
		log.Println(err)
		return nil, err
	}
	v.LastUpdated = time.Now()
	sqlString := "UPDATE job_agent SET "
	sqlString += "name = :name"
	sqlString += ",description = :description"
	sqlString += ",active = :active"
	sqlString += ",last_updated = :last_updated"
	sqlString += " WHERE id=:id"
	result, err := db.NamedExec(sqlString, v)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}

// @Title delJobAgentById
// @Description deletes job_agent information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    JobAgent
// @Resource /api/2.0
// @Router /api/2.0/job_agent/{id} [delete]
func delJobAgent(id int, db *sqlx.DB) (interface{}, error) {
	arg := JobAgent{}
	arg.Id = int64(id)
	result, err := db.NamedExec("DELETE FROM job_agent WHERE id=:id", arg)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}
