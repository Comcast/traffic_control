// Copyright 2015 Comcast Cable Communications Management, LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was initially generated by gen_to_start.go (add link), as a start
// of the Traffic Ops golang data model

package api

import (
	"encoding/json"
	_ "github.com/Comcast/traffic_control/traffic_ops/experimental/server/output_format" // needed for swagger
	"github.com/jmoiron/sqlx"
	null "gopkg.in/guregu/null.v3"
	"log"
	"time"
)

type Statuses struct {
	Name        string        `db:"name" json:"name"`
	Description null.String   `db:"description" json:"description"`
	CreatedAt   time.Time     `db:"created_at" json:"createdAt"`
	Links       StatusesLinks `json:"_links" db:-`
}

type StatusesLinks struct {
	Self string `db:"self" json:"_self"`
}

// @Title getStatusesById
// @Description retrieves the statuses information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    Statuses
// @Resource /api/2.0
// @Router /api/2.0/statuses/{id} [get]
func getStatus(name string, db *sqlx.DB) (interface{}, error) {
	ret := []Statuses{}
	arg := Statuses{}
	arg.Name = name
	queryStr := "select *, concat('" + API_PATH + "statuses/', name) as self"
	queryStr += " from statuses WHERE name=:name"
	nstmt, err := db.PrepareNamed(queryStr)
	err = nstmt.Select(&ret, arg)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	nstmt.Close()
	return ret, nil
}

// @Title getStatusess
// @Description retrieves the statuses
// @Accept  application/json
// @Success 200 {array}    Statuses
// @Resource /api/2.0
// @Router /api/2.0/statuses [get]
func getStatuses(db *sqlx.DB) (interface{}, error) {
	ret := []Statuses{}
	queryStr := "select *, concat('" + API_PATH + "statuses/', name) as self"
	queryStr += " from statuses"
	err := db.Select(&ret, queryStr)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return ret, nil
}

// @Title postStatuses
// @Description enter a new statuses
// @Accept  application/json
// @Param                 Body body     Statuses   true "Statuses object that should be added to the table"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/statuses [post]
func postStatus(payload []byte, db *sqlx.DB) (interface{}, error) {
	var v Statuses
	err := json.Unmarshal(payload, &v)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	sqlString := "INSERT INTO statuses("
	sqlString += "name"
	sqlString += ",description"
	sqlString += ",created_at"
	sqlString += ") VALUES ("
	sqlString += ":name"
	sqlString += ",:description"
	sqlString += ",:created_at"
	sqlString += ")"
	result, err := db.NamedExec(sqlString, v)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}

// @Title putStatuses
// @Description modify an existing statusesentry
// @Accept  application/json
// @Param   id              path    int     true        "The row id"
// @Param                 Body body     Statuses   true "Statuses object that should be added to the table"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/statuses/{id}  [put]
func putStatus(name string, payload []byte, db *sqlx.DB) (interface{}, error) {
	var arg Statuses
	err := json.Unmarshal(payload, &arg)
	arg.Name = name
	if err != nil {
		log.Println(err)
		return nil, err
	}
	sqlString := "UPDATE statuses SET "
	sqlString += "name = :name"
	sqlString += ",description = :description"
	sqlString += ",created_at = :created_at"
	sqlString += " WHERE name=:name"
	result, err := db.NamedExec(sqlString, arg)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}

// @Title delStatusesById
// @Description deletes statuses information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    Statuses
// @Resource /api/2.0
// @Router /api/2.0/statuses/{id} [delete]
func delStatus(name string, db *sqlx.DB) (interface{}, error) {
	arg := Statuses{}
	arg.Name = name
	result, err := db.NamedExec("DELETE FROM statuses WHERE name=:name", arg)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}
