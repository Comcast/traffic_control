// Copyright 2015 Comcast Cable Communications Management, LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was initially generated by gen_to_start.go (add link), as a start
// of the Traffic Ops golang data model

package api

import (
	"encoding/json"
	_ "github.com/Comcast/traffic_control/traffic_ops/experimental/server/output_format" // needed for swagger
	"github.com/jmoiron/sqlx"
	"log"
	"time"
)

type FederationsDeliveryservices struct {
	FederationId    int64                            `db:"federation_id" json:"federationId"`
	Deliveryservice string                           `db:"deliveryservice" json:"deliveryservice"`
	CreatedAt       time.Time                        `db:"created_at" json:"createdAt"`
	Links           FederationsDeliveryservicesLinks `json:"_links" db:-`
}

type FederationsDeliveryservicesLinks struct {
	Self string `db:"self" json:"_self"`
}

// @Title getFederationsDeliveryservicesById
// @Description retrieves the federations_deliveryservices information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    FederationsDeliveryservices
// @Resource /api/2.0
// @Router /api/2.0/federations_deliveryservices/{id} [get]
func getFederationsDeliveryservice(federationId int64, deliveryservice string, db *sqlx.DB) (interface{}, error) {
	ret := []FederationsDeliveryservices{}
	arg := FederationsDeliveryservices{}
	arg.FederationId = federationId
	arg.Deliveryservice = deliveryservice
	queryStr := "select *, concat('" + API_PATH + "federations_deliveryservices', '/federation_id/', federation_id, '/deliveryservice/', deliveryservice) as self"
	queryStr += " from federations_deliveryservices WHERE federation_id=:federation_id AND deliveryservice=:deliveryservice"
	nstmt, err := db.PrepareNamed(queryStr)
	err = nstmt.Select(&ret, arg)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	nstmt.Close()
	return ret, nil
}

// @Title getFederationsDeliveryservicess
// @Description retrieves the federations_deliveryservices
// @Accept  application/json
// @Success 200 {array}    FederationsDeliveryservices
// @Resource /api/2.0
// @Router /api/2.0/federations_deliveryservices [get]
func getFederationsDeliveryservices(db *sqlx.DB) (interface{}, error) {
	ret := []FederationsDeliveryservices{}
	queryStr := "select *, concat('" + API_PATH + "federations_deliveryservices', '/federation_id/', federation_id, '/deliveryservice/', deliveryservice) as self"
	queryStr += " from federations_deliveryservices"
	err := db.Select(&ret, queryStr)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return ret, nil
}

// @Title postFederationsDeliveryservices
// @Description enter a new federations_deliveryservices
// @Accept  application/json
// @Param                 Body body     FederationsDeliveryservices   true "FederationsDeliveryservices object that should be added to the table"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/federations_deliveryservices [post]
func postFederationsDeliveryservice(payload []byte, db *sqlx.DB) (interface{}, error) {
	var v FederationsDeliveryservices
	err := json.Unmarshal(payload, &v)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	sqlString := "INSERT INTO federations_deliveryservices("
	sqlString += "federation_id"
	sqlString += ",deliveryservice"
	sqlString += ",created_at"
	sqlString += ") VALUES ("
	sqlString += ":federation_id"
	sqlString += ",:deliveryservice"
	sqlString += ",:created_at"
	sqlString += ")"
	result, err := db.NamedExec(sqlString, v)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}

// @Title putFederationsDeliveryservices
// @Description modify an existing federations_deliveryservicesentry
// @Accept  application/json
// @Param   id              path    int     true        "The row id"
// @Param                 Body body     FederationsDeliveryservices   true "FederationsDeliveryservices object that should be added to the table"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/federations_deliveryservices/{id}  [put]
func putFederationsDeliveryservice(federationId int64, deliveryservice string, payload []byte, db *sqlx.DB) (interface{}, error) {
	var arg FederationsDeliveryservices
	err := json.Unmarshal(payload, &arg)
	arg.FederationId = federationId
	arg.Deliveryservice = deliveryservice
	if err != nil {
		log.Println(err)
		return nil, err
	}
	sqlString := "UPDATE federations_deliveryservices SET "
	sqlString += "federation_id = :federation_id"
	sqlString += ",deliveryservice = :deliveryservice"
	sqlString += ",created_at = :created_at"
	sqlString += " WHERE federation_id=:federation_id AND deliveryservice=:deliveryservice"
	result, err := db.NamedExec(sqlString, arg)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}

// @Title delFederationsDeliveryservicesById
// @Description deletes federations_deliveryservices information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    FederationsDeliveryservices
// @Resource /api/2.0
// @Router /api/2.0/federations_deliveryservices/{id} [delete]
func delFederationsDeliveryservice(federationId int64, deliveryservice string, db *sqlx.DB) (interface{}, error) {
	arg := FederationsDeliveryservices{}
	arg.FederationId = federationId
	arg.Deliveryservice = deliveryservice
	result, err := db.NamedExec("DELETE FROM federations_deliveryservices WHERE federation_id=:federation_id AND deliveryservice=:deliveryservice", arg)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}
