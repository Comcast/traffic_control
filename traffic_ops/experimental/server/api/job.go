// Copyright 2015 Comcast Cable Communications Management, LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was initially generated by gen_to_start.go (add link), as a start
// of the Traffic Ops golang data model

package api

import (
	"encoding/json"
	_ "github.com/Comcast/traffic_control/traffic_ops/experimental/server/output_format" // needed for swagger
	"github.com/jmoiron/sqlx"
	null "gopkg.in/guregu/null.v3"
	"log"
	"time"
)

type Job struct {
	Id          int64       `db:"id" json:"id"`
	ObjectType  null.String `db:"object_type" json:"objectType"`
	ObjectName  null.String `db:"object_name" json:"objectName"`
	Keyword     string      `db:"keyword" json:"keyword"`
	Parameters  null.String `db:"parameters" json:"parameters"`
	AssetUrl    string      `db:"asset_url" json:"assetUrl"`
	AssetType   string      `db:"asset_type" json:"assetType"`
	StartTime   time.Time   `db:"start_time" json:"startTime"`
	EnteredTime time.Time   `db:"entered_time" json:"enteredTime"`
	LastUpdated time.Time   `db:"last_updated" json:"lastUpdated"`
	Links       JobLinks    `json:"_links" db:-`
}

type JobLinks struct {
	Self                string              `db:"self" json:"_self"`
	JobAgentLink        JobAgentLink        `json:"job_agent" db:-`
	StatusLink          StatusLink          `json:"status" db:-`
	TmUserLink          TmUserLink          `json:"tm_user" db:-`
	DeliveryserviceLink DeliveryserviceLink `json:"deliveryservice" db:-`
}

type JobLink struct {
	ID  int64  `db:"job" json:"id"`
	Ref string `db:"job_id_ref" json:"_ref"`
}

// @Title getJobById
// @Description retrieves the job information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    Job
// @Resource /api/2.0
// @Router /api/2.0/job/{id} [get]
func getJobById(id int, db *sqlx.DB) (interface{}, error) {
	ret := []Job{}
	arg := Job{}
	arg.Id = int64(id)
	queryStr := "select *, concat('" + API_PATH + "job/', id) as self "
	queryStr += ", concat('" + API_PATH + "job_agent/', job_agent) as job_agent_id_ref"
	queryStr += ", concat('" + API_PATH + "job_status/', status) as job_status_id_ref"
	queryStr += ", concat('" + API_PATH + "tm_user/', tm_user) as tm_user_id_ref"
	queryStr += ", concat('" + API_PATH + "deliveryservice/', deliveryservice) as deliveryservice_id_ref"
	queryStr += " from job where id=:id"
	nstmt, err := db.PrepareNamed(queryStr)
	err = nstmt.Select(&ret, arg)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	nstmt.Close()
	return ret, nil
}

// @Title getJobs
// @Description retrieves the job
// @Accept  application/json
// @Success 200 {array}    Job
// @Resource /api/2.0
// @Router /api/2.0/job [get]
func getJobs(db *sqlx.DB) (interface{}, error) {
	ret := []Job{}
	queryStr := "select *, concat('" + API_PATH + "job/', id) as self "
	queryStr += ", concat('" + API_PATH + "job_agent/', job_agent) as job_agent_id_ref"
	queryStr += ", concat('" + API_PATH + "job_status/', status) as job_status_id_ref"
	queryStr += ", concat('" + API_PATH + "tm_user/', tm_user) as tm_user_id_ref"
	queryStr += ", concat('" + API_PATH + "deliveryservice/', deliveryservice) as deliveryservice_id_ref"
	queryStr += " from job"
	err := db.Select(&ret, queryStr)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return ret, nil
}

// @Title postJob
// @Description enter a new job
// @Accept  application/json
// @Param                 Body body     Job   true "Job object that should be added to the table"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/job [post]
func postJob(payload []byte, db *sqlx.DB) (interface{}, error) {
	var v Job
	err := json.Unmarshal(payload, &v)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	sqlString := "INSERT INTO job("
	sqlString += "job_agent"
	sqlString += ",object_type"
	sqlString += ",object_name"
	sqlString += ",keyword"
	sqlString += ",parameters"
	sqlString += ",asset_url"
	sqlString += ",asset_type"
	sqlString += ",status"
	sqlString += ",start_time"
	sqlString += ",entered_time"
	sqlString += ",tm_user"
	sqlString += ",deliveryservice"
	sqlString += ") VALUES ("
	sqlString += ":job_agent"
	sqlString += ",:object_type"
	sqlString += ",:object_name"
	sqlString += ",:keyword"
	sqlString += ",:parameters"
	sqlString += ",:asset_url"
	sqlString += ",:asset_type"
	sqlString += ",:status"
	sqlString += ",:start_time"
	sqlString += ",:entered_time"
	sqlString += ",:tm_user"
	sqlString += ",:deliveryservice"
	sqlString += ")"
	result, err := db.NamedExec(sqlString, v)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}

// @Title putJob
// @Description modify an existing jobentry
// @Accept  application/json
// @Param   id              path    int     true        "The row id"
// @Param                 Body body     Job   true "Job object that should be added to the table"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/job/{id}  [put]
func putJob(id int, payload []byte, db *sqlx.DB) (interface{}, error) {
	var v Job
	err := json.Unmarshal(payload, &v)
	v.Id = int64(id) // overwrite the id in the payload
	if err != nil {
		log.Println(err)
		return nil, err
	}
	v.LastUpdated = time.Now()
	sqlString := "UPDATE job SET "
	sqlString += "job_agent = :job_agent"
	sqlString += ",object_type = :object_type"
	sqlString += ",object_name = :object_name"
	sqlString += ",keyword = :keyword"
	sqlString += ",parameters = :parameters"
	sqlString += ",asset_url = :asset_url"
	sqlString += ",asset_type = :asset_type"
	sqlString += ",status = :status"
	sqlString += ",start_time = :start_time"
	sqlString += ",entered_time = :entered_time"
	sqlString += ",tm_user = :tm_user"
	sqlString += ",last_updated = :last_updated"
	sqlString += ",deliveryservice = :deliveryservice"
	sqlString += " WHERE id=:id"
	result, err := db.NamedExec(sqlString, v)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}

// @Title delJobById
// @Description deletes job information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    Job
// @Resource /api/2.0
// @Router /api/2.0/job/{id} [delete]
func delJob(id int, db *sqlx.DB) (interface{}, error) {
	arg := Job{}
	arg.Id = int64(id)
	result, err := db.NamedExec("DELETE FROM job WHERE id=:id", arg)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}
