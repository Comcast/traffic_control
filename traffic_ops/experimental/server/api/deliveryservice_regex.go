// Copyright 2015 Comcast Cable Communications Management, LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was initially generated by gen_to_start.go (add link), as a start
// of the Traffic Ops golang data model

package api

import (
	"encoding/json"
	_ "github.com/Comcast/traffic_control/traffic_ops/experimental/server/output_format" // needed for swagger
	"github.com/jmoiron/sqlx"
	null "gopkg.in/guregu/null.v3"
	"log"
)

type DeliveryserviceRegex struct {
	SetNumber null.Int                  `db:"set_number" json:"setNumber"`
	Links     DeliveryserviceRegexLinks `json:"_links" db:-`
}

type DeliveryserviceRegexLinks struct {
	Self                string              `db:"self" json:"_self"`
	RegexLink           RegexLink           `json:"regex" db:-`
	DeliveryserviceLink DeliveryserviceLink `json:"deliveryservice" db:-`
}

// @Title getDeliveryserviceRegexById
// @Description retrieves the deliveryservice_regex information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    DeliveryserviceRegex
// @Resource /api/2.0
// @Router /api/2.0/deliveryservice_regex/{id} [get]
func getDeliveryserviceRegexById(id int, db *sqlx.DB) (interface{}, error) {
	ret := []DeliveryserviceRegex{}
	arg := DeliveryserviceRegex{}
	arg.Links.DeliveryserviceLink.ID = int64(id)
	queryStr := "select *, concat('" + API_PATH + "deliveryservice_regex/', id) as self "
	queryStr += ", concat('" + API_PATH + "deliveryservice/', deliveryservice) as deliveryservice_id_ref"
	queryStr += ", concat('" + API_PATH + "regex/', regex) as regex_id_ref"
	queryStr += " from deliveryservice_regex where Links.DeliveryserviceLink.ID=:Links.DeliveryserviceLink.ID"
	nstmt, err := db.PrepareNamed(queryStr)
	err = nstmt.Select(&ret, arg)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	nstmt.Close()
	return ret, nil
}

// @Title getDeliveryserviceRegexs
// @Description retrieves the deliveryservice_regex
// @Accept  application/json
// @Success 200 {array}    DeliveryserviceRegex
// @Resource /api/2.0
// @Router /api/2.0/deliveryservice_regex [get]
func getDeliveryserviceRegexs(db *sqlx.DB) (interface{}, error) {
	ret := []DeliveryserviceRegex{}
	queryStr := "select *, concat('" + API_PATH + "deliveryservice_regex/', id) as self "
	queryStr += ", concat('" + API_PATH + "deliveryservice/', deliveryservice) as deliveryservice_id_ref"
	queryStr += ", concat('" + API_PATH + "regex/', regex) as regex_id_ref"
	queryStr += " from deliveryservice_regex"
	err := db.Select(&ret, queryStr)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return ret, nil
}

// @Title postDeliveryserviceRegex
// @Description enter a new deliveryservice_regex
// @Accept  application/json
// @Param                 Body body     DeliveryserviceRegex   true "DeliveryserviceRegex object that should be added to the table"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/deliveryservice_regex [post]
func postDeliveryserviceRegex(payload []byte, db *sqlx.DB) (interface{}, error) {
	var v DeliveryserviceRegex
	err := json.Unmarshal(payload, &v)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	sqlString := "INSERT INTO deliveryservice_regex("
	sqlString += "deliveryservice"
	sqlString += ",regex"
	sqlString += ",set_number"
	sqlString += ") VALUES ("
	sqlString += ":deliveryservice"
	sqlString += ",:regex"
	sqlString += ",:set_number"
	sqlString += ")"
	result, err := db.NamedExec(sqlString, v)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}

// @Title putDeliveryserviceRegex
// @Description modify an existing deliveryservice_regexentry
// @Accept  application/json
// @Param   id              path    int     true        "The row id"
// @Param                 Body body     DeliveryserviceRegex   true "DeliveryserviceRegex object that should be added to the table"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/deliveryservice_regex/{id}  [put]
func putDeliveryserviceRegex(id int, payload []byte, db *sqlx.DB) (interface{}, error) {
	var v DeliveryserviceRegex
	err := json.Unmarshal(payload, &v)
	v.Links.DeliveryserviceLink.ID = int64(id) // overwrite the id in the payload
	if err != nil {
		log.Println(err)
		return nil, err
	}
	sqlString := "UPDATE deliveryservice_regex SET "
	sqlString += "deliveryservice = :deliveryservice"
	sqlString += ",regex = :regex"
	sqlString += ",set_number = :set_number"
	sqlString += " WHERE Links.DeliveryserviceLink.ID=:Links.DeliveryserviceLink.ID"
	result, err := db.NamedExec(sqlString, v)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}

// @Title delDeliveryserviceRegexById
// @Description deletes deliveryservice_regex information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    DeliveryserviceRegex
// @Resource /api/2.0
// @Router /api/2.0/deliveryservice_regex/{id} [delete]
func delDeliveryserviceRegex(id int, db *sqlx.DB) (interface{}, error) {
	arg := DeliveryserviceRegex{}
	arg.Links.DeliveryserviceLink.ID = int64(id)
	result, err := db.NamedExec("DELETE FROM deliveryservice_regex WHERE id=:id", arg)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}
