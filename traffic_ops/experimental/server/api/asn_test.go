// Copyright 2015 Comcast Cable Communications Management, LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was initially generated by gen_to_start.go (add link), as a start
// of the Traffic Ops golang data model

package api

import (
	"encoding/json"
	"fmt"
	"github.com/DATA-DOG/go-sqlmock"
	"github.com/jmoiron/sqlx"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	"time"
)

func TestAsn(t *testing.T) {
	t.Log("Testing Asn...")

	// setup mock database
	db, mock, err := sqlmock.New()
	xdb := sqlx.NewDb(db, "postgres")
	assert.Nil(t, err, "error opening stub database")
	defer db.Close()

	// define the columns
	columns := []string{"id", "asn", "cachegroup"}

	// getAsns unit test
	rows := sqlmock.NewRows(columns).
		AddRow(1, 33099, 1).
		AddRow(2, 33093, 2)
	queryStr := "^select (.+) from asn$"
	mock.ExpectQuery(queryStr).WillReturnRows(rows)
	returned, err := getAsns(xdb)
	require.Equal(t, 2, len(returned.([]Asn)), "returned array should len 2")
	assert.Equal(t, int64(1), returned.([]Asn)[0].Id, "id should match")
	assert.Equal(t, int64(33099), returned.([]Asn)[0].Asn, "asn should match")
	assert.Equal(t, int64(2), returned.([]Asn)[1].Id, "id should match")
	assert.Equal(t, int64(33093), returned.([]Asn)[1].Asn, "asn should match")
	// error case
	mock.ExpectQuery(queryStr).WillReturnError(fmt.Errorf("Testing Database Error"))
	_, err = getAsns(xdb)
	assert.NotNil(t, err, "Database error should be passed in error")

	// getAsnById unit test
	rowTwo := sqlmock.NewRows(columns).
		AddRow(2, 33093, 2)
	queryStr = "^select (.+) from asn where id=\\$1$"
	mock.ExpectPrepare(queryStr)
	mock.ExpectQuery(queryStr).WithArgs(2).WillReturnRows(rowTwo)
	returned, err = getAsnById(2, xdb)
	require.Equal(t, 1, len(returned.([]Asn)), "returned array should len 1")
	assert.Equal(t, int64(2), returned.([]Asn)[0].Id, "id should match")
	assert.Equal(t, int64(33093), returned.([]Asn)[0].Asn, "asn should match")
	// error cases
	mock.ExpectPrepare(queryStr)
	mock.ExpectQuery(queryStr).WillReturnError(fmt.Errorf("Testing Database Error"))
	_, err = getAsnById(2, xdb)
	assert.NotNil(t, err, "Database error should be passed in error")

	// postAsn unit test - using struct and encdoding/json
	mock.ExpectExec("^INSERT INTO asn.*").WithArgs(333333, 5).WillReturnResult(sqlmock.NewResult(0, 1))
	cg := CachegroupLink{ID: 5}
	links := AsnLinks{CachegroupLink: cg}
	newAsn := Asn{Asn: 333333, Links: links}
	jsonTxt, err := json.MarshalIndent(newAsn, "", "    ")
	assert.Nil(t, err, "Error Marshalling")
	if testing.Verbose() {
		t.Log("Insert:\n", string(jsonTxt))
	}
	_, err = postAsn([]byte(jsonTxt), xdb)
	// error cases
	mock.ExpectExec("^INSERT INTO asn.*").WillReturnError(fmt.Errorf("Testing Database Error"))
	_, err = postAsn([]byte(jsonTxt), xdb)
	assert.NotNil(t, err, "Database error should be passed in error")
	_, err = postAsn([]byte("fooo"), xdb)
	assert.NotNil(t, err, "JSON error should be passed in error")

	// putAsn unit test - using string json
	mock.ExpectExec("^UPDATE asn.*").WithArgs(181818, 5, time.Now(), 1).WillReturnResult(sqlmock.NewResult(0, 1))
	_, err = putAsn(1, []byte(`{ "asn":181818, "_links": { "cachegroup": { "id": 5 }}}`), xdb)
	// error cases
	mock.ExpectExec("^UPDATE asn.*").WillReturnError(fmt.Errorf("Testing Database Error"))
	_, err = putAsn(1, []byte(`{ "asn":181818, "_links": { "cachegroup": { "id": 5 }}}`), xdb)
	assert.NotNil(t, err, "Database error should be passed in error")
	_, err = putAsn(1, []byte("{ quote missing herefoo\":181818, \"bar\": { \"cachegroup\": { \"id\": 5 }}}"), xdb)
	assert.NotNil(t, err, "JSON error should be passed in error")

	// delAsn unit test
	mock.ExpectExec("^DELETE FROM asn.*").WithArgs(6).WillReturnResult(sqlmock.NewResult(0, 1))
	_, err = delAsn(6, xdb)
	// error case
	mock.ExpectExec("^DELETE FROM asn.*").WillReturnError(fmt.Errorf("Testing Database Error"))
	_, err = delAsn(6, xdb)
	assert.NotNil(t, err, "Database error should be passed in error")

	// Make sure all the right queries were seen
	if err := mock.ExpectationsWereMet(); err != nil {
		t.Errorf("there were unfulfilled expections: %s", err)
	}
}
