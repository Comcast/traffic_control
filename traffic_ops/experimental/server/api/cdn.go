// Copyright 2015 Comcast Cable Communications Management, LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was initially generated by gen_to_start.go (add link), as a start
// of the Traffic Ops golang data model

package api

import (
	"encoding/json"
	_ "github.com/Comcast/traffic_control/traffic_ops/experimental/server/output_format" // needed for swagger
	"github.com/jmoiron/sqlx"
	null "gopkg.in/guregu/null.v3"
	"log"
	"time"
)

type Cdn struct {
	Id            int64       `db:"id" json:"id"`
	Name          null.String `db:"name" json:"name"`
	LastUpdated   time.Time   `db:"last_updated" json:"lastUpdated"`
	DnssecEnabled null.Int    `db:"dnssec_enabled" json:"dnssecEnabled"`
	Links         CdnLinks    `json:"_links" db:-`
}

type CdnLinks struct {
	Self string `db:"self" json:"_self"`
}

type CdnLink struct {
	ID  int64  `db:"cdn" json:"id"`
	Ref string `db:"cdn_id_ref" json:"_ref"`
}

// @Title getCdnById
// @Description retrieves the cdn information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    Cdn
// @Resource /api/2.0
// @Router /api/2.0/cdn/{id} [get]
func getCdnById(id int, db *sqlx.DB) (interface{}, error) {
	ret := []Cdn{}
	arg := Cdn{}
	arg.Id = int64(id)
	queryStr := "select *, concat('" + API_PATH + "cdn/', id) as self "
	queryStr += " from cdn where id=:id"
	nstmt, err := db.PrepareNamed(queryStr)
	err = nstmt.Select(&ret, arg)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	nstmt.Close()
	return ret, nil
}

// @Title getCdns
// @Description retrieves the cdn
// @Accept  application/json
// @Success 200 {array}    Cdn
// @Resource /api/2.0
// @Router /api/2.0/cdn [get]
func getCdns(db *sqlx.DB) (interface{}, error) {
	ret := []Cdn{}
	queryStr := "select *, concat('" + API_PATH + "cdn/', id) as self "
	queryStr += " from cdn"
	err := db.Select(&ret, queryStr)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return ret, nil
}

// @Title postCdn
// @Description enter a new cdn
// @Accept  application/json
// @Param                 Body body     Cdn   true "Cdn object that should be added to the table"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/cdn [post]
func postCdn(payload []byte, db *sqlx.DB) (interface{}, error) {
	var v Cdn
	err := json.Unmarshal(payload, &v)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	sqlString := "INSERT INTO cdn("
	sqlString += "name"
	sqlString += ",dnssec_enabled"
	sqlString += ") VALUES ("
	sqlString += ":name"
	sqlString += ",:dnssec_enabled"
	sqlString += ")"
	result, err := db.NamedExec(sqlString, v)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}

// @Title putCdn
// @Description modify an existing cdnentry
// @Accept  application/json
// @Param   id              path    int     true        "The row id"
// @Param                 Body body     Cdn   true "Cdn object that should be added to the table"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/cdn/{id}  [put]
func putCdn(id int, payload []byte, db *sqlx.DB) (interface{}, error) {
	var v Cdn
	err := json.Unmarshal(payload, &v)
	v.Id = int64(id) // overwrite the id in the payload
	if err != nil {
		log.Println(err)
		return nil, err
	}
	v.LastUpdated = time.Now()
	sqlString := "UPDATE cdn SET "
	sqlString += "name = :name"
	sqlString += ",last_updated = :last_updated"
	sqlString += ",dnssec_enabled = :dnssec_enabled"
	sqlString += " WHERE id=:id"
	result, err := db.NamedExec(sqlString, v)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}

// @Title delCdnById
// @Description deletes cdn information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    Cdn
// @Resource /api/2.0
// @Router /api/2.0/cdn/{id} [delete]
func delCdn(id int, db *sqlx.DB) (interface{}, error) {
	arg := Cdn{}
	arg.Id = int64(id)
	result, err := db.NamedExec("DELETE FROM cdn WHERE id=:id", arg)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return result, err
}
