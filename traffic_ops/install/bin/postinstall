#!/usr/bin/perl

#
# Copyright 2015 Comcast Cable Communications Management, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

use strict;
use warnings;

use lib qw(/opt/traffic_ops/install/lib /opt/traffic_ops/install/lib/perl5 /opt/traffic_ops/app/local/lib/perl5 /opt/traffic_ops/app/lib);
$ENV{PATH}     = "/opt/traffic_ops/install/bin:$ENV{PATH}";
$ENV{PERL5LIB} = "/opt/traffic_ops/install/lib:/opt/traffic_ops/install/lib/perl5:/opt/traffic_ops/app/local/lib/perl5:/opt/traffic_ops/app/lib";

use DBI;
use JSON;
use InstallUtils qw{ :all };
use Digest::SHA1 qw(sha1_hex);
use Data::Dumper;
use File::Temp;

my $database_conf     = "/opt/traffic_ops/app/conf/production/database.conf";
my $ldap_conf         = "/opt/traffic_ops/app/conf/ldap.conf";
my $cdn_conf          = "/opt/traffic_ops/app/conf/cdn.conf";
my $migrations_dbconf = "/opt/traffic_ops/app/db/dbconf.yml";
my $post_install_cfg  = "/opt/traffic_ops/install/data/json/post_install.json";
my $users_file        = "/opt/traffic_ops/install/data/json/users.json";
my %dbdriver          = ( mysql => "mymysql", );

my $reconfigure = "/opt/traffic_ops/.reconfigure";

my $installMsg = << 'EOF';

This script will initialize the Traffic Ops database.
Please enter the following information in order to completely 
configure the Traffic Ops mysql database.

EOF

sub readJson {
	my $file = shift;
	open( my $fh, '<', $file ) or return;
	local $/;    # slurp mode
	my $text = <$fh>;
	undef $fh;
	return JSON->new->utf8->decode($text);
}

sub writeJson {
	my $file = shift;
	open( my $fh, '>', $file ) or die("open(): $!");
	foreach my $data (@_) {
		my $json_text = JSON->new->utf8->encode($data);
		print $fh $json_text, "\n";
	}
	close $fh;
}

sub writeYamlToFH {
	my $fh     = shift;
	my $data   = shift;
	my $level  = shift || 0;
	my $prefix = shift || '';

	my $type   = ref($data);
	my $indent = ' ' x $level;
	if ( $type eq '' ) {

		# scalar
		print $fh "$indent$prefix$data\n";
	}
	elsif ( $type eq 'HASH' ) {
		foreach my $key ( keys %$data ) {
			my $value = $data->{$key};
			if ( ref($value) eq '' ) {
				print $fh "$indent$key: $value\n";
			}
			else {
				print $fh "$indent$key:\n";
				writeYamlToFH( $fh, $data->{$key}, $level + 1 );
			}
		}
	}
	elsif ( $type eq 'ARRAY' ) {
		foreach my $d (@$data) {
			writeYamlToFH( $fh, $d, $level + 1, '- ' );
		}
	}
}

sub writeYaml {
	my $file = shift;
	my $data = shift;
	open my $fh, '>', $file or die "open(): $!";
	writeYamlToFH( $fh, $data );
}

# Init.
sub init () {
	my $c      = readJson($database_conf);
	my %dbconf = %$c;
	my $dbAdminUser;
	my $dbAdminPw;

	# loop exits on successful db connect
	while (1) {
		execCommand( "/usr/bin/tput", "clear" );

		if ($DBI::errstr) {
			print "Error connecting to database using the supplied information: $DBI::errstr\n";
		}

		print "\n$installMsg\n";

		$dbconf{type}     = promptUser( "Database type",                       $dbconf{type}     || "mysql" );
		$dbconf{dbname}   = promptUser( "Database name",                       $dbconf{dbname}   || "traffic_ops_db" );
		$dbconf{hostname} = promptUser( "Database server hostname IP or FQDN", $dbconf{hostname} || "localhost" );
		$dbconf{port}     = promptUser( "Database port number",                $dbconf{port}     || "3306" );
		$dbconf{user}     = promptUser( "Traffic Ops database user",           $dbconf{user}     || "traffic_ops" );
		$dbconf{password} = promptPasswordVerify("Password for $dbconf{user}");
		$dbconf{description} = "$dbconf{type} database on $dbconf{hostname}:$dbconf{port}";
		print "\n";
		$dbAdminUser = promptUser( "Database server root (admin) user name", "root" );
		$dbAdminPw = promptPassword("Database server $dbAdminUser password");

		print "Database Type: $dbconf{type}\n";
		print "Database Name: $dbconf{dbname}\n";
		print "Hostname: $dbconf{hostname}\n";
		print "Port: $dbconf{port}\n";
		print "Database User: $dbconf{user}\n";
		my $ans = promptUser( "Is the above information correct (y/n)", "n" );

		if ( $ans eq "y" ) {
			my $dsn = sprintf( "DBI:mysql:%s:%s:%s", "mysql", $dbconf{hostname}, $dbconf{port} );
			my $dbh = DBI->connect( $dsn, $dbAdminUser, $dbAdminPw );
			if ($dbh) {

				# Success!
				$dbh->disconnect();
				last;
			}
		}
	}

	writeJson( $database_conf, \%dbconf );
	print "\nThe database properties have been saved to $database_conf\n";

	# migrations dbconf is in YAML
	my $driver = $dbdriver{ $dbconf{type} };
	my %migrations = ( production => { driver => $driver, open => "tcp:$dbconf{hostname}:$dbconf{port}*$dbconf{dbname}/$dbconf{user}/$dbconf{password}" } );
	writeYaml( $migrations_dbconf, \%migrations );

	my $msg = << 'EOF';

  The database configuration has been saved.  Now we need to set some custom
  fields that are necessary for the CDN to function correctly.

EOF

	print $msg, "\n";
	my $parameters = readJson($post_install_cfg);
	while (1) {

		my $tmurl = promptUser( "Traffic Ops url", $parameters->{"tm.url"} || "https://localhost" );
		$parameters->{"tm.url"}     = $tmurl;
		$parameters->{"tm.infourl"} = "$tmurl/info";

		$parameters->{cdnname}    = promptUser( "Human-readable CDN Name.  (No whitespace, please)",  $parameters->{cdnname}    || "kabletown_cdn" );
		$parameters->{domainname} = promptUser( "DNS sub-domain for which your CDN is authoritative", $parameters->{domainname} || "cdn1.kabletown.net" );

		my $geolocationUrl = "$tmurl/routing/GeoIP2-City.mmdb.gz";
		$parameters->{"geolocation.polling.url"} = $geolocationUrl;

		my $coverageZoneUrl = "$tmurl/routing/coverage-zone.json";
		$parameters->{"coveragezone.polling.url"} = $coverageZoneUrl;

		my $centos65TarballFqn = '';
		my $skip;
		while (1) {
			$centos65TarballFqn = promptUser( "Fully qualified name of your CentOS 6.5 ISO kickstart tar file, or 'na' to skip and add files later",
				"/var/cache/centos65.tgz" );
			if ( $centos65TarballFqn eq 'na' ) {
				$skip = 1;
				last;
			}
			if ( -f $centos65TarballFqn ) {
				last;
			}
			print "\nNo file named $centos65TarballFqn found.\n\n";
		}

		my $kickstartFilesFqn = promptUser( "Fully qualified location to store your ISO kickstart files", "/var/www/files" );
		my $parametersJson = "/opt/traffic_ops/install/data/json/parameter.json";

		## Replace parameter with $kickstartFilesFqn
		open( my $json_fh, "<:encoding(UTF-8)", $parametersJson )
			or die("Can't open \$filename\": $!\n");

		my $json = JSON->new;
		my @json_obj;
		while ( my $json_text = <$json_fh> ) {
			my $data = $json->decode($json_text);

			if ( $data->{"name"} eq "kickstart.files.location" ) {
				$data->{"value"} = $kickstartFilesFqn;
			}
			push @json_obj, $data;
		}
		writeJson( $parametersJson, @json_obj );

		execCommand( "/bin/cp", "/opt/traffic_ops/install/data/perl/osversions.cfg", $kickstartFilesFqn );

		if ( !$skip ) {
			print "\nUntarring CentOS 6.5 ISO kickstart tar file.\n";
			print "\nFirst creating $kickstartFilesFqn.\n";
			execCommand( "/bin/mkdir", "-p", $kickstartFilesFqn );
			print "\nAnd then the untar.\n";
			execCommand( "/bin/tar", "-xzf", $centos65TarballFqn, "-C", $kickstartFilesFqn );
		}

		print "\nTraffic Ops URL: $parameters->{'tm.url'}\n";
		print "Traffic Ops Info URL: $parameters->{'tm.infourl'}\n";
		print "Domainname: $parameters->{domainname}\n";
		print "CDN Name: $parameters->{cdnname}\n";
		print "GeoLocation Polling URL: $parameters->{'geolocation.polling.url'}\n";
		print "CoverageZone Polling URL: $parameters->{'coveragezone.polling.url'}\n\n";
		my $ans = promptUser( "Is the above information correct (y/n)", "n" );
		if ( $ans eq 'y' ) {
			last;
		}
	}
	writeJson( $post_install_cfg, $parameters );
	print "Install information has been saved to $post_install_cfg\n\n";

	print "\nAdding an administration user to the Traffic Ops database.\n\n";
	my %user = ();
	my $tmAdminUser = promptUser( "Administration username for Traffic Ops", 'admin' );
	$user{username} = $tmAdminUser;
	my $tmAdminPw = promptPasswordVerify("Password for the admin user $tmAdminUser");
	$user{password} = sha1_hex($tmAdminPw);

	writeJson( $users_file, \%user );

	my $ans = promptUser( "Do you wish to create an ldap configuration for access to traffic ops [y/n] ?", "n" );
	if ( $ans eq "y" ) {
		my %ldapconf = readJson($ldap_conf);
		while (1) {
			$ldapconf{host}     = promptUser( "LDAP server hostname", $ldapconf{host}     || "ldap.foobar.com" );
			$ldapconf{admin_dn} = promptUser( "LDAP Admin DN",        $ldapconf{admin_dn} || 'admin@foobar.com' );
			$ldapconf{admin_pass} = promptPasswordVerify("LDAP Admin Password");
			$ldapconf{search_base} = promptUser( "LDAP Search Base", "dc=foobar,dc=com" );
			my $correct = promptUser( "Are the above values correct [y/n]?", "y" );
			if ( $correct eq 'y' ) {
				last;
			}
		}
		writeJson( $ldap_conf, \%ldapconf );
		print "The ldap configuration has been saved.\n\n";
	}

	# Prompt for new secret
	writeSecret($cdn_conf);

	#
	# Call mysql initialization script.
	#
	print "Creating database\n";
	my $result = execCommand( "/opt/traffic_ops/install/bin/create_db", $dbAdminUser, $dbAdminPw );
	if ( $result != 0 ) {
		print "failed to create the database.\n";
		exit 1;
	}

	print "Setting up database\n";
	chdir("/opt/traffic_ops/app");
	$result = execCommand( "/usr/bin/perl", "db/admin.pl", "--env=production", "setup" );

	if ( $result != 0 ) {
		print "Database initialization failed.\n";
		exit 2;
	}
	else {
		print "Database initialization succeeded.\n";
	}

	$result = execCommand( "/opt/traffic_ops/install/bin/dataload", $dbAdminUser, $dbAdminPw );
	if ( $result != 0 ) {
		print "failed to load seed data.\n";
		exit 1;
	}

	print "Downloading MaxMind data.\n";
	chdir("/opt/traffic_ops/app/public/routing");
	$result = execCommand("/usr/bin/wget http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz");
	if ( $result != 0 ) {
		print "failed to download MaxMind data.\n";

		# exit 1;
	}

	print "Copying coverage zone file to public dir.\n";
	$result = execCommand("/bin/mv /opt/traffic_ops/app/public/coverage-zone.json .");
	if ( $result != 0 ) {
		print "failed to copy coverage zone file.\n";

		# exit 1;
	}

	if ( -x "/usr/bin/openssl" ) {
		print "\nInstalling SSL Certificates.\n\n";
		$result = execCommand("/opt/traffic_ops/install/bin/generateCert");

		if ( $result != 0 ) {
			print "\nSSL Certificate Installation failed.\n";
			exit 3;
		}
		else {
			print "\nSSL Certificates have been installed.\n";
		}
	}
	else {
		print "Unable to install SSL certificates as openssl is not installed.\n";
		print "Install openssl and then run /opt/traffic_ops/install/bin/generateCert to install SSL certificates.\n";
		exit 4;
	}
}    # end of Init

sub writeSecret {
	print "\n\nTraffic Ops requires a secret key to generate authentication cookies.\n\n";

	# read conf file -- see if secrets already there
	my $cdnh = do $cdn_conf;
	unless ( ref($cdnh) eq 'HASH' ) {
		my $err = $@ || $! || ' -- not a HASH';
		if ($err) {
			print "Could not load $cdn_conf $err";
			exit 4;
		}
	}

	# newSecret
	my $secrets = $cdnh->{secrets};
	if ( ( ref $secrets eq 'ARRAY' ) && scalar @$secrets > 0 ) {
		print "One or more secrets found in $cdn_conf.\n";
		my $ans = promptUser( " Do want to add a new one (only 2 will be kept) [y/n] ?", "y" );
		if ( $ans eq "n" ) {

			# nothing further to do...
			return;
		}
	}
	my $new_secret = "";
	while ( length $new_secret == 0 ) {
		print "Adding a new secret.\n";
		my $ans = promptUser( " Do you want one generated for you [y/n] ?", "y" );
		if ( $ans eq "n" ) {
			$new_secret = promptUser( "Secret key:", "" );
		}
		else {

			# create random word 12 chars long
			$new_secret = randomWord(12);
		}
	}

	# keep 2 at most..
	unshift( @$secrets, $new_secret );
	if ( scalar @$secrets > 2 ) {
		$#{$secrets} = 1;
	}

	# dump conf data in compact but readable form
	my $dumper = Data::Dumper->new( [$cdnh] );
	$dumper->Indent(1)->Terse(1)->Quotekeys(0);

	# write whole config to temp file
	my $tmpfile = File::Temp->new();
	print $tmpfile $dumper->Dump();
	close $tmpfile;

	# rename current config file to something unique so it's not lost
	my $backup_num = 0;
	my $backup_name;
	do {
		$backup_num++;
		$backup_name = "$cdn_conf.backup$backup_num";
	} while ( -e $backup_name );
	rename( $cdn_conf, $backup_name ) or die("rename(): $!");

	# rename temp file to cdn.conf and set ownership/permissions same as backup
	my @stats = stat($backup_name);
	my ( $uid, $gid, $perm ) = @stats[ 4, 5, 2 ];
	rename( "$tmpfile", $cdn_conf ) or die("rename(): $!");

	chown $uid, $gid, $cdn_conf;
	chmod $perm, $cdn_conf;
}

chdir("/opt/traffic_ops/install/bin");

if ( -f $reconfigure ) {
	my $rc = execCommand( "/opt/traffic_ops/install/bin/build_trafficops_perl_library", "-i" );
	if ( $rc != 0 ) {
		print "ERROR: failed to install perl dependencies, check the console output and rerun postinstall once you've resolved the error.\n";
		exit 5;
	}
	$rc = execCommand( "./download_web_deps", "-i" );
	if ( $rc != 0 ) {
		print "ERROR: failed to install Traffic Ops Web dependencies, check the console output and rerun postinstall once you've resolved the error.\n";
		exit 5;
	}
	init();
	unlink($reconfigure);
}
else {
	my $rc = execCommand("/opt/traffic_ops/install/bin/build_trafficops_perl_library");
	if ( $rc != 0 ) {
		print "ERROR: failed to install perl dependencies, check the console output and rerun postinstall once you've resolved the error.\n";
		exit 6;
	}
	$rc = execCommand( "./download_web_deps", "-i" );
	if ( $rc != 0 ) {
		print "ERROR: failed to install Traffic Ops Web dependencies, check the console output and rerun postinstall once you've resolved the error.\n";
		exit 5;
	}
}

print "\nStarting Traffic Ops.\n\n";
execCommand("/sbin/service traffic_ops start");

print "\nWaiting for Traffic Ops to start.\n\n";
sleep(5);

#print "\nRunning smoke tests.\n\n";
#$rc = execCommand ("/opt/traffic_ops/install/bin/systemtest", "localhost", $user{username}, $tmAdminPw, "0");

my $ans = promptUser( "\nShutdown Traffic Ops [y/n]", "n" );
if ( $ans eq "y" ) {
	print "\nShutting down Traffic Ops.\n\n";
	execCommand( "/sbin/service", "traffic_ops", "stop" );
}

print "\nTo start Traffic Ops:  service traffic_ops start\n";
print "To stop Traffic Ops:   service traffic_ops stop\n";
print "\n";

exit 0;
