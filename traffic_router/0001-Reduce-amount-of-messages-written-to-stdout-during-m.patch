From 7dcf92b8dc5827fb390f9782810422b456c8fbcb Mon Sep 17 00:00:00 2001
From: Trevor Ackerman <trevorackerman.softdev@gmail.com>
Date: Fri, 9 Oct 2015 12:59:01 -0600
Subject: [PATCH] Reduce amount of messages written to stdout during maven
 testing, demote some logger messages from warn to info

---
 traffic_router/core/pom.xml                        | 10 +++++++++-
 .../traffic_router/core/dns/SignatureManager.java  |  2 +-
 .../traffic_router/core/ds/DeliveryService.java    |  3 +--
 .../core/loc/AbstractServiceUpdater.java           |  2 +-
 .../core/monitor/TrafficMonitorWatcher.java        |  4 ++--
 .../core/util/PeriodicResourceUpdater.java         |  2 +-
 .../traffic_router/core/loc/MaxmindGeoIP2Test.java |  2 --
 .../DeliveryServiceHTTPRoutingMissesTest.java      |  3 +++
 .../core/router/StatelessTrafficRouterTest.java    |  6 ------
 .../core/src/test/resources/log4j.maven.properties | 22 ++++++++++++++++++++++
 10 files changed, 40 insertions(+), 16 deletions(-)
 create mode 100644 traffic_router/core/src/test/resources/log4j.maven.properties

diff --git a/traffic_router/core/pom.xml b/traffic_router/core/pom.xml
index d8891a8..621cab1 100644
--- a/traffic_router/core/pom.xml
+++ b/traffic_router/core/pom.xml
@@ -200,7 +200,15 @@
 					</archive>
 				</configuration>
 			</plugin>
-
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-surefire-plugin</artifactId>
+				<configuration>
+					<systemPropertyVariables>
+						<log4j.configuration>file:src/test/resources/log4j.maven.properties</log4j.configuration>
+					</systemPropertyVariables>
+				</configuration>
+			</plugin>
 		</plugins>
 	</build>
 
diff --git a/traffic_router/core/src/main/java/com/comcast/cdn/traffic_control/traffic_router/core/dns/SignatureManager.java b/traffic_router/core/src/main/java/com/comcast/cdn/traffic_control/traffic_router/core/dns/SignatureManager.java
index 0238090..4d29a5c 100644
--- a/traffic_router/core/src/main/java/com/comcast/cdn/traffic_control/traffic_router/core/dns/SignatureManager.java
+++ b/traffic_router/core/src/main/java/com/comcast/cdn/traffic_control/traffic_router/core/dns/SignatureManager.java
@@ -97,7 +97,7 @@ public final class SignatureManager {
 					LOGGER.fatal(e, e);
 				}
 			} else {
-				LOGGER.warn("DNSSEC not enabled; to enable, set dnssec.enabled = true in the profile parameters for this Traffic Router in Traffic Ops");
+				LOGGER.info("DNSSEC not enabled; to enable, set dnssec.enabled = true in the profile parameters for this Traffic Router in Traffic Ops");
 			}
 		}
 	}
diff --git a/traffic_router/core/src/main/java/com/comcast/cdn/traffic_control/traffic_router/core/ds/DeliveryService.java b/traffic_router/core/src/main/java/com/comcast/cdn/traffic_control/traffic_router/core/ds/DeliveryService.java
index c8a2a7f..2000312 100644
--- a/traffic_router/core/src/main/java/com/comcast/cdn/traffic_control/traffic_router/core/ds/DeliveryService.java
+++ b/traffic_router/core/src/main/java/com/comcast/cdn/traffic_control/traffic_router/core/ds/DeliveryService.java
@@ -69,8 +69,7 @@ public class DeliveryService {
 		this.props = dsJo;
 		this.ttls = dsJo.optJSONObject("ttls");
 		if(this.ttls == null) {
-			LOGGER.warn("ttls is null for:"+id);
-			LOGGER.warn(dsJo.toString(2));
+			LOGGER.warn("ttls is null for " + id + ": '" + dsJo.toString(2) + "'");
 		}
 		this.coverageZoneOnly = dsJo.getBoolean("coverageZoneOnly");
 		this.geoEnabled = dsJo.optJSONArray("geoEnabled");
diff --git a/traffic_router/core/src/main/java/com/comcast/cdn/traffic_control/traffic_router/core/loc/AbstractServiceUpdater.java b/traffic_router/core/src/main/java/com/comcast/cdn/traffic_control/traffic_router/core/loc/AbstractServiceUpdater.java
index 38c01e7..633b166 100644
--- a/traffic_router/core/src/main/java/com/comcast/cdn/traffic_control/traffic_router/core/loc/AbstractServiceUpdater.java
+++ b/traffic_router/core/src/main/java/com/comcast/cdn/traffic_control/traffic_router/core/loc/AbstractServiceUpdater.java
@@ -79,7 +79,7 @@ public abstract class AbstractServiceUpdater {
 
 	public void init() {
 		final long pi = getPollingInterval();
-		LOGGER.warn(getClass().getSimpleName() + " Starting schedule with interval: " + pi + " : " + TimeUnit.MILLISECONDS);
+		LOGGER.info(getClass().getSimpleName() + " Starting schedule with interval: " + pi + " : " + TimeUnit.MILLISECONDS);
 		scheduledService = executorService.scheduleWithFixedDelay(updater, pi, pi, TimeUnit.MILLISECONDS);
 	}
 
diff --git a/traffic_router/core/src/main/java/com/comcast/cdn/traffic_control/traffic_router/core/monitor/TrafficMonitorWatcher.java b/traffic_router/core/src/main/java/com/comcast/cdn/traffic_control/traffic_router/core/monitor/TrafficMonitorWatcher.java
index 8a650be..6f61efa 100644
--- a/traffic_router/core/src/main/java/com/comcast/cdn/traffic_control/traffic_router/core/monitor/TrafficMonitorWatcher.java
+++ b/traffic_router/core/src/main/java/com/comcast/cdn/traffic_control/traffic_router/core/monitor/TrafficMonitorWatcher.java
@@ -239,11 +239,11 @@ public class TrafficMonitorWatcher  {
 		synchronized(hostSync) {
 			if (hosts == null || hosts.length == 0) {
 				hosts = newHosts;
-				LOGGER.warn("traffic_monitor.bootstrap.hosts: " + Arrays.toString(hosts));
+				LOGGER.info("traffic_monitor.bootstrap.hosts: " + Arrays.toString(hosts));
 			} else if (!Arrays.asList(hosts).containsAll(Arrays.asList(newHosts))
 					|| !Arrays.asList(newHosts).containsAll(Arrays.asList(hosts))) {
 				hosts = newHosts;
-				LOGGER.warn("traffic_monitor.bootstrap.hosts changed to: " + Arrays.toString(hosts));
+				LOGGER.info("traffic_monitor.bootstrap.hosts changed to: " + Arrays.toString(hosts));
 			} else {
 				LOGGER.debug("traffic_monitor.bootstrap.hosts unchanged: " + Arrays.toString(hosts));
 			}
diff --git a/traffic_router/core/src/main/java/com/comcast/cdn/traffic_control/traffic_router/core/util/PeriodicResourceUpdater.java b/traffic_router/core/src/main/java/com/comcast/cdn/traffic_control/traffic_router/core/util/PeriodicResourceUpdater.java
index 9f90705..39fb195 100644
--- a/traffic_router/core/src/main/java/com/comcast/cdn/traffic_control/traffic_router/core/util/PeriodicResourceUpdater.java
+++ b/traffic_router/core/src/main/java/com/comcast/cdn/traffic_control/traffic_router/core/util/PeriodicResourceUpdater.java
@@ -136,7 +136,7 @@ public class PeriodicResourceUpdater {
 
 	public void init() {
 		putCurrent();
-		LOGGER.warn("Starting schedule with interval: "+getPollingInterval() + " : "+TimeUnit.MILLISECONDS);
+		LOGGER.info("Starting schedule with interval: "+getPollingInterval() + " : "+TimeUnit.MILLISECONDS);
 		scheduledService = executorService.scheduleWithFixedDelay(updater, 0, getPollingInterval(), TimeUnit.MILLISECONDS);
 		// wait here until something is loaded
 		final File existingDB = new File(databaseLocation);
diff --git a/traffic_router/core/src/test/java/com/comcast/cdn/traffic_control/traffic_router/core/loc/MaxmindGeoIP2Test.java b/traffic_router/core/src/test/java/com/comcast/cdn/traffic_control/traffic_router/core/loc/MaxmindGeoIP2Test.java
index 75848ed..6da7656 100644
--- a/traffic_router/core/src/test/java/com/comcast/cdn/traffic_control/traffic_router/core/loc/MaxmindGeoIP2Test.java
+++ b/traffic_router/core/src/test/java/com/comcast/cdn/traffic_control/traffic_router/core/loc/MaxmindGeoIP2Test.java
@@ -44,8 +44,6 @@ public class MaxmindGeoIP2Test {
 
 		long duration = System.currentTimeMillis() - start;
 		double tps = (double) total / ((double) duration / 1000);
-
-		System.out.println("MaxMind2 lookup duration: " + duration + "ms, " + tps + " tps");
 	}
 
 	@After
diff --git a/traffic_router/core/src/test/java/com/comcast/cdn/traffic_control/traffic_router/core/router/DeliveryServiceHTTPRoutingMissesTest.java b/traffic_router/core/src/test/java/com/comcast/cdn/traffic_control/traffic_router/core/router/DeliveryServiceHTTPRoutingMissesTest.java
index 3de5936..20ebb0f 100644
--- a/traffic_router/core/src/test/java/com/comcast/cdn/traffic_control/traffic_router/core/router/DeliveryServiceHTTPRoutingMissesTest.java
+++ b/traffic_router/core/src/test/java/com/comcast/cdn/traffic_control/traffic_router/core/router/DeliveryServiceHTTPRoutingMissesTest.java
@@ -5,6 +5,7 @@ import com.comcast.cdn.traffic_control.traffic_router.core.request.HTTPRequest;
 import com.comcast.cdn.traffic_control.traffic_router.core.router.StatTracker.Track;
 import com.comcast.cdn.traffic_control.traffic_router.core.router.StatTracker.Track.ResultDetails;
 
+import com.google.api.client.json.Json;
 import org.json.JSONObject;
 import org.junit.Before;
 import org.junit.Test;
@@ -24,6 +25,8 @@ public class DeliveryServiceHTTPRoutingMissesTest {
     @Before
     public void before() throws Exception {
         JSONObject unusedByTest = mock(JSONObject.class);
+        JSONObject ttls = mock(JSONObject.class);
+        when(unusedByTest.optJSONObject("ttls")).thenReturn(ttls);
         deliveryService = new DeliveryService("ignoredbytest", unusedByTest);
         httpRequest = mock(HTTPRequest.class);
         track = StatTracker.getTrack();
diff --git a/traffic_router/core/src/test/java/com/comcast/cdn/traffic_control/traffic_router/core/router/StatelessTrafficRouterTest.java b/traffic_router/core/src/test/java/com/comcast/cdn/traffic_control/traffic_router/core/router/StatelessTrafficRouterTest.java
index a1701ec..c92fab5 100644
--- a/traffic_router/core/src/test/java/com/comcast/cdn/traffic_control/traffic_router/core/router/StatelessTrafficRouterTest.java
+++ b/traffic_router/core/src/test/java/com/comcast/cdn/traffic_control/traffic_router/core/router/StatelessTrafficRouterTest.java
@@ -45,9 +45,6 @@ public class StatelessTrafficRouterTest {
 	public static void setUpBeforeClass() throws Exception {
 		try {
 			context = TestBase.getContext();
-			Logger root = Logger.getRootLogger();
-			boolean rootIsConfigured = root.getAllAppenders().hasMoreElements();
-			System.out.println("rootIsConfigured: "+rootIsConfigured);
 		} catch(Exception e) {
 			e.printStackTrace();
 		}
@@ -100,9 +97,6 @@ public class StatelessTrafficRouterTest {
 			HTTPRouteResult routeResult = trafficRouterManager.getTrafficRouter().route(req, track);
 			if (routeResult == null) {
 //				fail("HTTP route returned null");
-				System.out.println("HTTP route returned null");
-			} else {
-				System.out.println(routeResult.getUrl());
 			}
 		} catch (Exception e2) {
 			e2.printStackTrace();
diff --git a/traffic_router/core/src/test/resources/log4j.maven.properties b/traffic_router/core/src/test/resources/log4j.maven.properties
new file mode 100644
index 0000000..7fa0bb5
--- /dev/null
+++ b/traffic_router/core/src/test/resources/log4j.maven.properties
@@ -0,0 +1,22 @@
+#
+# Copyright 2015 Comcast Cable Communications Management, LLC
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+# 
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+# A1 is set to be a RollingFileAppender.
+log4j.appender.Stdout=org.apache.log4j.ConsoleAppender
+log4j.appender.Stdout.layout=org.apache.log4j.PatternLayout
+log4j.appender.Stdout.layout.conversionPattern=%-5p - %c{1} - %m\n
+
+log4j.rootLogger=WARN,Stdout
\ No newline at end of file
-- 
2.5.1

